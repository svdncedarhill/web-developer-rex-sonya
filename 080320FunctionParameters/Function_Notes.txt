JavaScript Functions
--------------------
A function is a reusable code block; which will be executed by a call to the function. 

Functions are used for code reusability

A function is defined by using the keyword - "function"

- need of function 
  - usecase - display first 10 nautural numbers 4 times
  - change to function


1) Function Declaration
-----------------------
Syntax:
 function <functionName>(parameters)
 {  
     //code to be executed  
 }  

- Function with no parameters
function greet(){
 console.log('Welcome to Softwave IT');
}

- Function with parameters
function greetMe(name, age){
 console.log(`Hello ${name}, You are ${age} years old`);
}

- Function with parameters and return type
"return" script is used for returning a value back to the caller
function sum(x,y)
{
 let sum = x+y
 return sum
}

function printNumbers(start,end, increment) 
{
    let output = '';
    for(let i=start; i<=end; i += increment){
        output += `${i} `;
    }
    return output;
}


let result = printNumbers(1,20,1);
console.log(result);

- Object as Function parameters
function printDetails(obj){
 
}

printDetails({name:'Sunil',age:35}

- an array as a parameter
function printArray(array){
}


- Function call with less number of arguments


Note: it is possible for us to provide the default value for the function parameters [New feature of ES6]

<script>
function addNum(x=0,y=0){
 let s = x+y
 return s
}    

console.log(addNum(11,22)) -- 33
console.log(addNum(10)) -- 10 
console.log(addNum()) -- 0
</script>



Note: In JS , function names are unique. That means function overloading is not happening directly through function definition



To declare a function use:-
 1) a function declaration or 
 2) a function expression


2) Function Expressions
-----------------------
This is a feature of functional programming. 

Here we can assign the function itself as a value to a variable.

It is also called as First class Function.
JS contains many First Class Functions

Example:
<script>
let add = function addNum(x=0 , y=0){
    let sum = x+y;
    console.log('Sum = '+sum);
}

add(11,22);
add(10);
add()
</script> 
In the above case we have created a variable "add" and assigned a function itself as a value to it; so that we can execute that function with the variable name "add()"

let calc = function(op1, op2, operator){
  let res=0
  if(operator=='+')
    res = op1+op2
  else if(operator=='-')
    res = op1-op2
  ....
  console.log(res)
}

calc(10,20,'+')






Anonymous Function Expression
-----------------------------
Any function expression without a function name is called as Anonymous function expression

<script>
let add = function(x=0 , y=0){
    let sum = x+y;
    console.log('Result = '+sum);
}

add(11,22);
</script> 

let printStars = function(theNumber) {
    let output = '';
    for(let i =1 ; i<= theNumber ; i++){
        for(let j =1; j<= i; j++){
            output += '*';
        }
        output += '\n';
    }
    return output;
};
console.log(printStars(10));
---------------------

function inside an object
let student = {
  firstName: 'Sunil',
  lastName: 'Joseph',
  fullName: function(){
    let name = this.firstName+" " +this.lastName
    console.log(name)
  }
}

student.fullName()

----------------------------------

Arrow Function
--------------
- new feature of ES-6
- it is similar to lamda expression in Java

let calcNumbers = function(a,b,c){
  let result = a+(b*c)
  console.log(result)
}

calcNumbers(1,2,3)

let calcNumbers = (a,b,c) => {
  let result = a+(b*c)
  console.log(result)
}


<script>
let greet = () => {
    alert('Welcome to SIT')
}    

let greet = () => alert('Welcome to SIT')
 

let add = (x=0,y=0)=>{
    console.log('Sum = '+(x+y))
}
</script>

<script>
 add(11,30)    
 greet()    
</script>


let add = (x=0,y=0)=>(x+y)



let displayNumbers = (endNumber) => {
      let output = '';
      for(let i = 1; i<= endNumber; i++){
          output += `${i} `;
      }
      return output;
};
console.log(displayNumbers(10));

--------------------
