Object in Java Script
---------------------
- to store an employee details
let empNo_1 = 101
let empName_1 = 'Sunil'
let empAge_1 = 36
let empSalary_1 = 5000

for storing second employee details
let empNo_2 = 102
let empName_2 = 'Naveen'
let empAge_2 = 35
let empSalary_2 = 6000

- to store 100 employee details


Java Script is an Object oriented Language
We can create objects without class

let employee = {
  empno: 101,
  name: 'Sunil',
  age: 40,
  salary: 7000,  
}

Ways of creating an Object:
---------------------------
1) Create an empty object
 <script>
  let emp = {};
  console.log(emp);
  console.log(typeof emp); //object
 </script>

 add properties to an object after creation

 emp.firstName = 'Sunil';
 emp.lastName = 'Joseph';
 emp.age = 35;
 console.log(emp);//{firstName: "Sunil", lastName: "Joseph", age: 35}

Properties of an object can be accessed by 
 (a) dot notation 
     console.log(emp.firstName)

 (b) bracket notation
     console.log(emp['firstName']);


- Accessing a non-existant property of an object


2) Create JavaScript Object with Object Literal:
- adding properties to an object at the time of creation


let employee = {firstName: 'Sunil', lastName: 'Joseph', age: 35};


Adding property to the object:
--------------------
employee.designation='Manager'
console.log(employee)
console.log(employee.designation)



 let student ={
     name: 'Sanjay',
     age: 22,
     course: 'Computers'
 }

 console.log(student);



let mobile = {
    brand : 'Apple',
    color : 'Silver',
    price : 35000,
    isInsured : false
};
console.log(mobile);


3) Create JavaScript Object with Constructor

<script>
function Employee(fname, lname) {
   this.firstName = fname;
   this.lastName = lname;
}
</script>
<script>
//creating 2 objects
let emp1 = new Employee('Sunil', 'Joseph');

let emp2 = new Employee('Anil','Kumar')

console.log(emp1.firstName); //Sunil
console.log(emp2.firstName); //Anil
console.log(emp1);
console.log(emp2);    
</script>    


this and new keywords
---------------------
- this keyword:
is the reference of the current object inside a function

- new keyword:
used to create an object 
in front of any function turns the function call into constructor call



for...in loop
-------------
- the for...in statement iterates through the properties of an object.
- the block of code inside the loop will be executed for each property.

Syntax:
 for(variable_name in object) 
 {
  block of code to be executed
 }


where:
variable_name - a variable name that stores property name of the object in each iteration

object - the specified object that will be iterated


<script>
let person = {fname:"Sunil", lname:"Joseph", age:25};   
let x;

for(x in person) {
   console.log(x+" : "+person[x]);
} 
</script>    






Nested Objects:
---------------
A JS object defined inside another JS object is called as Nested Object.

<script>
let student = {
 name : 'Sunil Joseph',
 age: 23,
 dept: 'Computers',
 address: {
   street: 'Ameerpet',
   city: 'Hyderabad',
   state: 'Telangana'
 }
};

console.log(student.address.street) //Ameerpet

let property;
for(property in student){
  console.log(property+" : "+ student[property]);   
}    

console.log('Student Address:')    

for(let x in student.address) {
 console.log(x+" : "+ student.address[x])    
}   
<script>


In the above example - we have student object and inside that we got addresss object

to access the nested object property
 student.address.city

to add a new property
 student.address.country='India';



Functions inside Objects:
-------------------------
<script>
let employee = {
  firstName: 'Sunil',
  lastName: 'Joseph',

  fullName: function(){
     let name = this.firstName+" "+this.lastName;
     console.log(name);
  }
};

//execution of a function inside object
employee.fullName();
</script>


// Delete a Property from an Object
console.log(student);
delete student.address;
console.log(student);

------------------------------
// CRUD with Objects

// Create Operation
let laptop = {};

laptop.brand = 'HP';
laptop.color = 'White';
laptop.price = 56000;
laptop.ramSize = '12GB';
console.log(laptop);

// READ operation
console.log(`Brand : ${laptop.brand}`);
console.log(`Color : ${laptop.color}`);

// UPDATE operation
laptop.ramSize = '16GB';
console.log(laptop);

// DELETE Operation
delete laptop.ramSize;
console.log(laptop);

---------------------------
console.log(employee.hasOwnProperty('empNo'))


Any JavaScript object can be converted to an array using Object.values()

let keys = Object.keys(employee)
- creates an array that contains the properties of an object

let values = Object.values(employee)
- creates an array that contains the values of every property in an object 

let properties = Object.entries(employee)
-  creates an array of arrays. Each inner array has two item. The first item is the property; the second item is the value.

Looping through the array
// Looping through arrays created from Object.keys
const keys = Object.keys(employee)
for(let key of keys) 
{
  console.log(key)
}

for (const [fruit, count] of entries) {
  console.log(`There are ${count} ${fruit}s`)
}



-----------------------------------------------
Using JSON.stringify()

Any JavaScript object can be stringified (converted to a string) with the JavaScript function JSON.stringify():
var person = {name:"John", age:30, city:"New York"};

var myString = JSON.stringify(person);




